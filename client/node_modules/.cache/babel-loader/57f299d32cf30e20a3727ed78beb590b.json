{"ast":null,"code":"import { USER_LOADING, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from '../actions/types';\nconst initialState = {\n  token: localStorage.getItem('token'),\n  //we have a token which comes from the localstorage\n  isAuthenticated: null,\n  isLoading: false,\n  //where user is loading        \n  user: null\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    //userloading is just the point from where we r get the user from the backend to the point to where we actually fetch the user\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n    //when the user is actually loaded, we want the set isAuthenticated to true because we went and validated on the backend, got that user set that to true.\n    //isloading should then set back to false because the user is now loaded and then now user is nbow loaded and then user will be set to action.payload\n    //which we r gonna send the user as the payload\n    //so this USER_LOADED is gonna run basicaaly all the time with every request to see if we r logged in or not\n\n    case USER_LOADED:\n      return { ...state,\n        isAuthenticated: true,\n        isLoading: true,\n        user: action.payload\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      localStorage.setItem('token', action.payload.token);\n      return { ...state,\n        ...action.payload,\n        //thats gonna have user and the token\n        isAuthenticated: true,\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n      localStorage.removeItem('token');\n      return { ...state,\n        token: null,\n        user: null,\n        isloading: false,\n        isAuthenticated: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mausam/travnode/client/src/reducers/authReducer.js"],"names":["USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","initialState","token","localStorage","getItem","isAuthenticated","isLoading","user","state","action","type","payload","setItem","removeItem","isloading"],"mappings":"AAAA,SACIA,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,QAUO,kBAVP;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADU;AACqB;AACtCC,EAAAA,eAAe,EAAE,IAFA;AAGjBC,EAAAA,SAAS,EAAE,KAHM;AAGC;AAClBC,EAAAA,IAAI,EAAE;AAJW,CAArB;AASA,eAAe,UAAUC,KAAK,GAAGP,YAAlB,EAAgCQ,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKjB,YAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHF,QAAAA,SAAS,EAAE;AAFR,OAAP;AAKA;AACA;AACA;AACA;;AACA,SAAKZ,WAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHH,QAAAA,eAAe,EAAE,IAFd;AAGCC,QAAAA,SAAS,EAAE,IAHZ;AAICC,QAAAA,IAAI,EAAEE,MAAM,CAACE;AAJd,OAAP;;AAMA,SAAKf,aAAL;AACA,SAAKG,gBAAL;AACII,MAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACE,OAAP,CAAeT,KAA7C;AAEA,aAAO,EACH,GAAGM,KADA;AAEH,WAAGC,MAAM,CAACE,OAFP;AAEgB;AACfN,QAAAA,eAAe,EAAE,IAHlB;AAICC,QAAAA,SAAS,EAAE;AAJZ,OAAP;;AAOA,SAAKX,UAAL;AACA,SAAKE,UAAL;AACA,SAAKC,cAAL;AACA,SAAKE,aAAL;AACIG,MAAAA,YAAY,CAACU,UAAb,CAAwB,OAAxB;AACA,aAAO,EACH,GAAGL,KADA;AAEHN,QAAAA,KAAK,EAAE,IAFJ;AAGHK,QAAAA,IAAI,EAAE,IAHH;AAIHO,QAAAA,SAAS,EAAE,KAJR;AAKHT,QAAAA,eAAe,EAAE;AALd,OAAP;;AAOA;AACI,aAAOG,KAAP;AA3CxB;AA+CH","sourcesContent":["import {\n    USER_LOADING,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n\n} from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'), //we have a token which comes from the localstorage\n    isAuthenticated: null,\n    isLoading: false, //where user is loading        \n    user: null\n}\n\n\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        //userloading is just the point from where we r get the user from the backend to the point to where we actually fetch the user\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true\n            }\n\n            //when the user is actually loaded, we want the set isAuthenticated to true because we went and validated on the backend, got that user set that to true.\n            //isloading should then set back to false because the user is now loaded and then now user is nbow loaded and then user will be set to action.payload\n            //which we r gonna send the user as the payload\n            //so this USER_LOADED is gonna run basicaaly all the time with every request to see if we r logged in or not\n            case USER_LOADED:\n                return {\n                    ...state,\n                    isAuthenticated: true,\n                        isLoading: true,\n                        user: action.payload\n                }\n                case LOGIN_SUCCESS:\n                case REGISTER_SUCCESS:\n                    localStorage.setItem('token', action.payload.token);\n\n                    return {\n                        ...state,\n                        ...action.payload, //thats gonna have user and the token\n                            isAuthenticated: true,\n                            isLoading: false,\n                    }\n\n                    case AUTH_ERROR:\n                    case LOGIN_FAIL:\n                    case LOGOUT_SUCCESS:\n                    case REGISTER_FAIL:\n                        localStorage.removeItem('token');\n                        return {\n                            ...state,\n                            token: null,\n                            user: null,\n                            isloading: false,\n                            isAuthenticated: false\n                        }\n                        default:\n                            return state;\n\n\n    }\n}"]},"metadata":{},"sourceType":"module"}