{"ast":null,"code":"import _classCallCheck from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Container,ListGroup,ListGroupItem,Button}from'reactstrap';import{CSSTransition,TransitionGroup}from'react-transition-group';// import { v4 as uuidv4 } from 'uuid';\n// uuidv4();\nimport{connect}from'react-redux';//allows us to basically to get state from redux into react into a react component\nimport{getItems,deleteItem}from'../actions/itemActions';//when we call getitems it will send the action.type or it will dispatch to the reducer and then returns the state to the component\nvar ShoppingList=/*#__PURE__*/function(_Component){_inherits(ShoppingList,_Component);var _super=_createSuper(ShoppingList);function ShoppingList(){var _this;_classCallCheck(this,ShoppingList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.onDeleteClick=function(id){_this.props.deleteItem(id);};return _this;}_createClass(ShoppingList,[{key:\"componentDidMount\",// state = {\n//     items: [\n//         { id: uuidv4(), name:\"egg\" },\n//         { id: uuidv4(), name:\"milk\" },\n//         { id: uuidv4(), name:\"meat\" },\n//         { id: uuidv4(), name:\"proteins\" }\n//     ]\n// }\n//now we r gonna call this getitems from the component using reducers so removing the states from the components coz we want it to come from our redux reducer our item reducer\n//when you want to make API request or calling an action we do it\n//before we used to access(this).state from the component but we r now using state from our reducer from our store\nvalue:function componentDidMount(){this.props.getItems();}},{key:\"render\",value:function render(){var _this2=this;// const { items } = this.state\n//state from reducer component react and mapping the state to props\n//item represents the whole state but items represents only to an array\nvar items=this.props.item.items;return/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(\"link\",{rel:\"shortcut icon\",href:\"#\"}),/*#__PURE__*/React.createElement(ListGroup,null,/*#__PURE__*/React.createElement(TransitionGroup,{className:\"shopping-list\"},items.map(function(_ref){var _id=_ref._id,name=_ref.name;return/*#__PURE__*/React.createElement(CSSTransition,{key:_id,timeout:500,classNames:\"fade\"},/*#__PURE__*/React.createElement(ListGroupItem,null,/*#__PURE__*/React.createElement(Button,{className:\"remove-btn\",color:\"primary\",size:\"sm\"// onClick={() => {\n//     this.setState(state => ({\n//         items: state.items.filter(item => item.id !== id)\n//     }));\n// }} \n//when we click the delete button its going to call on delete click its gonna pass the ID in which comes in right above the delete function\n//and then we r gonna call the action delete item pass in the ID which is this here in the itemaction.js and then from there its going to get\n//sent to the reducer along with the payload and then in the reducer we r going to do the same thing we did before with the filter except we r\n//using action.payload which should include the ID so , and hence in this way we can delete the item by using ID\n,onClick:_this2.onDeleteClick.bind(_this2,_id)},\"\\xD7\"),name));}))));}}]);return ShoppingList;}(Component);//when you bring an action from redux to react its going to be stored as prop\n//when i say it represents our state it is a prop but we r mapping it from the state so we r mapping those the redux state to a component property\nvar mapStateToProps=function mapStateToProps(state){return{item:state.item};};//mapStateToProps allows us to take our items state in this case this is our state and \n//we want to basically turn this or map this into a component property so that we can \n//use it in the shopping lists so we want to use it as this.props.items\nexport default connect(mapStateToProps,{getItems:getItems,deleteItem:deleteItem})(ShoppingList);","map":{"version":3,"sources":["/home/mausam/travnode/client/src/components/ShoppingList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","connect","getItems","deleteItem","ShoppingList","onDeleteClick","id","props","items","item","map","_id","name","bind","mapStateToProps","state"],"mappings":"4jBAAA,MAAQA,CAAAA,KAAR,EAAiBC,SAAjB,KAAkC,OAAlC,CACA,OAASC,SAAT,CAAoBC,SAApB,CAA+BC,aAA/B,CAA8CC,MAA9C,KAA4D,YAA5D,CACA,OAAQC,aAAR,CAAuBC,eAAvB,KAA8C,wBAA9C,CACA;AACA;AAEA,OAASC,OAAT,KAAwB,aAAxB,CAA0C;AAC1C,OAASC,QAAT,CAAmBC,UAAnB,KAAqC,wBAArC,CAAiE;GAG3DC,CAAAA,Y,mVA0BNC,a,CAAgB,SAAAC,EAAE,CAAI,CAClB,MAAKC,KAAL,CAAWJ,UAAX,CAAsBG,EAAtB,EACH,C,mEA1BG;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEJ;AACA;AACA;kCAEA,CACI,KAAKC,KAAL,CAAWL,QAAX,GACH,C,uCAsBG,iBACI;AACA;AACE;AAHN,GAKYM,CAAAA,KALZ,CAKsB,KAAKD,KAAL,CAAWE,IALjC,CAKYD,KALZ,CAMI,mBACI,oBAAC,SAAD,mBACI,4BAAM,GAAG,CAAC,eAAV,CAA0B,IAAI,CAAC,GAA/B,EADJ,cAqBI,oBAAC,SAAD,mBACI,oBAAC,eAAD,EAAiB,SAAS,CAAC,eAA3B,EACKA,KAAK,CAACE,GAAN,CAAU,kBAAGC,CAAAA,GAAH,MAAGA,GAAH,CAAQC,IAAR,MAAQA,IAAR,oBACP,oBAAC,aAAD,EAAe,GAAG,CAAID,GAAtB,CAA2B,OAAO,CAAE,GAApC,CAAyC,UAAU,CAAC,MAApD,eACI,oBAAC,aAAD,mBACI,oBAAC,MAAD,EACA,SAAS,CAAC,YADV,CAEA,KAAK,CAAC,SAFN,CAGA,IAAI,CAAC,IACL;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA,CAcA,OAAO,CAAI,MAAI,CAACN,aAAL,CAAmBQ,IAAnB,CAAwB,MAAxB,CAA8BF,GAA9B,CAdX,SADJ,CAmBMC,IAnBN,CADJ,CADO,EAAV,CADL,CADJ,CArBJ,CADJ,CAuDH,C,0BArGsBlB,S,EAyG3B;AAMA;AACA,GAAMoB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,QAAY,CAChCN,IAAI,CAAEM,KAAK,CAACN,IADoB,CAAZ,EAAxB,CAKA;AACA;AACA;AACA,cAAeR,CAAAA,OAAO,CAACa,eAAD,CAAiB,CAAEZ,QAAQ,CAARA,QAAF,CAAYC,UAAU,CAAVA,UAAZ,CAAjB,CAAP,CAAkDC,YAAlD,CAAf","sourcesContent":["import  React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport {CSSTransition, TransitionGroup } from 'react-transition-group';\n// import { v4 as uuidv4 } from 'uuid';\n// uuidv4();\n\nimport { connect } from 'react-redux';    //allows us to basically to get state from redux into react into a react component\nimport { getItems, deleteItem } from '../actions/itemActions';   //when we call getitems it will send the action.type or it will dispatch to the reducer and then returns the state to the component\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component\n{\n    // state = {\n    //     items: [\n    //         { id: uuidv4(), name:\"egg\" },\n    //         { id: uuidv4(), name:\"milk\" },\n    //         { id: uuidv4(), name:\"meat\" },\n    //         { id: uuidv4(), name:\"proteins\" }\n            \n    //     ]\n    // }\n\n//now we r gonna call this getitems from the component using reducers so removing the states from the components coz we want it to come from our redux reducer our item reducer\n//when you want to make API request or calling an action we do it\n//before we used to access(this).state from the component but we r now using state from our reducer from our store\ncomponentDidMount()\n{\n    this.props.getItems();\n}\n\n\n\n\n\n\n\nonDeleteClick = id => {\n    this.props.deleteItem(id);\n};\n\n\n\n\n\n\n\n\n\n\n    render()\n    {\n        // const { items } = this.state\n        //state from reducer component react and mapping the state to props\n          //item represents the whole state but items represents only to an array\n\n        const { items } = this.props.item           \n        return(\n            <Container>\n                <link rel=\"shortcut icon\" href=\"#\" />\n\n                {/* <Button\n                color=\"dark\"\n                style={{ marginBottom: \"2rem\" }}\n                onClick={ () => {\n                    const name = prompt('Enter the Item');\n                    if(name)\n                    {\n                        this.setState(state => ({\n                            items: [...state.items, {id: uuidv4(), name}]\n                        }));\n                    }\n                } }\n                \n                >\n                    Add Item\n\n                </Button> */}\n\n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items.map(({ _id, name}) => (\n                            <CSSTransition key = {_id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem>\n                                    <Button\n                                    className=\"remove-btn\"\n                                    color=\"primary\"\n                                    size=\"sm\"\n                                    // onClick={() => {\n                                    //     this.setState(state => ({\n                                    //         items: state.items.filter(item => item.id !== id)\n                                    //     }));\n                                    // }} \n\n                                    //when we click the delete button its going to call on delete click its gonna pass the ID in which comes in right above the delete function\n                                    //and then we r gonna call the action delete item pass in the ID which is this here in the itemaction.js and then from there its going to get\n                                    //sent to the reducer along with the payload and then in the reducer we r going to do the same thing we did before with the filter except we r\n                                    //using action.payload which should include the ID so , and hence in this way we can delete the item by using ID\n                                    onClick = {this.onDeleteClick.bind(this, _id)}     \n                                    >\n                                        &times;\n                                    </Button>\n                                    { name }\n                                </ListGroupItem>\n\n                            </CSSTransition>\n                        ) )}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n\n        )\n    }\n}\n\n\n//when you bring an action from redux to react its going to be stored as prop\nShoppingList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired     //it respresents our state which is going to be object\n}\n\n//when i say it represents our state it is a prop but we r mapping it from the state so we r mapping those the redux state to a component property\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n\n\n//mapStateToProps allows us to take our items state in this case this is our state and \n//we want to basically turn this or map this into a component property so that we can \n//use it in the shopping lists so we want to use it as this.props.items\nexport default connect(mapStateToProps,{ getItems, deleteItem })(ShoppingList);"]},"metadata":{},"sourceType":"module"}