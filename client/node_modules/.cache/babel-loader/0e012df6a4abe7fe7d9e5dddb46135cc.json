{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR // LOGIN_SUCCESS,\n// LOGIN_FAIL,\n// LOGOUT_SUCCESS,\n// REGISTER_SUCCESS,\n// REGISTER_FAIL,\n} from '../actions/types'; //since we are making async req we need to to call dispatch, i want to be able to get the token from the state so along with dispatch, gbetstate also so that we can get certain\n//parts of our state, calling userloading to set it from false to true from authreducer.js\n//now we r going to fetch the user so using axios\n//getting token from ,localstorage from authreducer\n//adding headers\n//if there is token, setting x-auth-token to token and hence passing congig in the get req\n//check for the token and load the user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data //user and the token itself\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data)); //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //SETUP config/headers and token\n\nexport const tokenConfig = getState => {\n  //GET TOKEN FROM THE localStorage\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //if token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/mausam/travnode/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,CAII;AACA;AACA;AACA;AACA;AARJ,OAUO,kBAVP,C,CAcA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;AASAF,EAAAA,KAAK,CAACS,GAAN,CAAU,gBAAV,EAA4BC,WAAW,CAACH,QAAD,CAAvC,EACKI,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEL,WADY;AAElBU,IAAAA,OAAO,EAAED,GAAG,CAACE,IAFK,CAEA;;AAFA,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACL,YAAY,CAACe,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAb,CAAR,CADU,CACyC;;AACnDR,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAtBM,C,CAyBP;;AAEA,OAAO,MAAMM,WAAW,GAAGH,QAAQ,IAAI;AAC/B;AACA,QAAMW,KAAK,GAAGX,QAAQ,GAAGY,IAAX,CAAgBD,KAA9B,CAF+B,CAM/B;;AACA,QAAME,MAAM,GAAG;AACPC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADF,GAAf,CAP+B,CAc/B;;AACA,MAAIH,KAAJ,EAAW;AACPE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AACD,SAAOE,MAAP;AACH,CAnBE","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n \nimport {\n    USER_LOADING,\n    USER_LOADED,\n    AUTH_ERROR,\n    // LOGIN_SUCCESS,\n    // LOGIN_FAIL,\n    // LOGOUT_SUCCESS,\n    // REGISTER_SUCCESS,\n    // REGISTER_FAIL,\n\n} from '../actions/types';\n\n\n\n//since we are making async req we need to to call dispatch, i want to be able to get the token from the state so along with dispatch, gbetstate also so that we can get certain\n//parts of our state, calling userloading to set it from false to true from authreducer.js\n//now we r going to fetch the user so using axios\n//getting token from ,localstorage from authreducer\n//adding headers\n//if there is token, setting x-auth-token to token and hence passing congig in the get req\n\n//check for the token and load the user\nexport const loadUser = () => (dispatch, getState) => {\n    //user Loading\n    dispatch({\n        type: USER_LOADING\n    });\n\n    \n    \n    \n\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data //user and the token itself\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data));         //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n}\n\n\n//SETUP config/headers and token\n\nexport const tokenConfig = getState => {\n        //GET TOKEN FROM THE localStorage\n        const token = getState().auth.token;\n\n    \n    \n        //headers\n        const config = {\n                headers: {\n                    \"Content-type\": \"application/json\"\n            }\n\n        }   \n\n        //if token, add to headers\n        if (token) {\n            config.headers['x-auth-token'] = token;\n        }\n        return config;\n    }"]},"metadata":{},"sourceType":"module"}