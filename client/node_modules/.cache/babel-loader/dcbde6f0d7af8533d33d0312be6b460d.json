{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADING, USER_LOADED, AUTH_ERROR, REGISTER_SUCCESS, REGISTER_FAIL // LOGIN_SUCCESS,\n// LOGIN_FAIL,\n// LOGOUT_SUCCESS,\n// REGISTER_SUCCESS,\n// REGISTER_FAIL,\n} from '../actions/types'; //since we are making async req we need to to call dispatch, i want to be able to get the token from the state so along with dispatch, gbetstate also so that we can get certain\n//parts of our state, calling userloading to set it from false to true from authreducer.js\n//now we r going to fetch the user so using axios\n//getting token from ,localstorage from authreducer\n//adding headers\n//if there is token, setting x-auth-token to token and hence passing congig in the get req\n//check for the token and load the user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', auth, tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data //user and the token itself\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status)); //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //here we r doing it right after the register in registerModal\n//REGISTER USER\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //REQUEST BODY\n  //turns javascript object to json\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data //we want to send the payload to the reducer along with data and the token\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')); //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //SETUP config/headers and token\n\nexport const tokenConfig = getState => {\n  //GET TOKEN FROM THE localStorage\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //if token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/home/mausam/travnode/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADING","USER_LOADED","AUTH_ERROR","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","auth","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","token"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAGgBC,gBAHhB,EAGkCC,aAHlC,CAII;AACA;AACA;AACA;AACA;AARJ,OAUO,kBAVP,C,CAcA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAER;AADD,GAAD,CAAR;AASAF,EAAAA,KAAK,CAACW,GAAN,CAAU,gBAAV,EAA4BC,IAA5B,EAAkCC,WAAW,CAACJ,QAAD,CAA7C,EACKK,IADL,CACUC,GAAG,IAAIP,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEP,WADY;AAElBa,IAAAA,OAAO,EAAED,GAAG,CAACE,IAFK,CAEA;;AAFA,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVX,IAAAA,QAAQ,CAACP,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR,CADU,CAC8D;;AACxEb,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAtBM,C,CA6BP;AACA;;AACA,OAAO,MAAMkB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+BjB,QAAQ,IAAI;AAG/D;AACA,QAAMkB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CAJ+D,CAUnE;AACA;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AAEAzB,EAAAA,KAAK,CAAC+B,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,EACCZ,IADD,CACMC,GAAG,IAAIP,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEL,gBADY;AAElBW,IAAAA,OAAO,EAAED,GAAG,CAACE,IAFK,CAEoB;;AAFpB,GAAD,CADrB,EAMCC,KAND,CAMOC,GAAG,IAAI;AACVX,IAAAA,QAAQ,CAACP,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR,CADU,CAC+E;;AACzFb,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEJ;AADD,KAAD,CAAR;AAGH,GAXD;AAaC,CA3BM,C,CAmCP;;AAEA,OAAO,MAAMO,WAAW,GAAGJ,QAAQ,IAAI;AAC/B;AACA,QAAMuB,KAAK,GAAGvB,QAAQ,GAAGG,IAAX,CAAgBoB,KAA9B,CAF+B,CAM/B;;AACA,QAAMN,MAAM,GAAG;AACPC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADF,GAAf,CAP+B,CAc/B;;AACA,MAAIK,KAAJ,EAAW;AACPN,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCK,KAAjC;AACH;;AACD,SAAON,MAAP;AACH,CAnBE","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\n \nimport {\n    USER_LOADING,\n    USER_LOADED,\n    AUTH_ERROR, REGISTER_SUCCESS, REGISTER_FAIL\n    // LOGIN_SUCCESS,\n    // LOGIN_FAIL,\n    // LOGOUT_SUCCESS,\n    // REGISTER_SUCCESS,\n    // REGISTER_FAIL,\n\n} from '../actions/types';\n\n\n\n//since we are making async req we need to to call dispatch, i want to be able to get the token from the state so along with dispatch, gbetstate also so that we can get certain\n//parts of our state, calling userloading to set it from false to true from authreducer.js\n//now we r going to fetch the user so using axios\n//getting token from ,localstorage from authreducer\n//adding headers\n//if there is token, setting x-auth-token to token and hence passing congig in the get req\n\n//check for the token and load the user\nexport const loadUser = () => (dispatch, getState) => {\n    //user Loading\n    dispatch({\n        type: USER_LOADING\n    });\n\n    \n    \n      \n\n\n    axios.get('/api/auth/user', auth, tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data //user and the token itself\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));         //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n            dispatch({  \n                type: AUTH_ERROR\n            });\n        });\n}\n\n\n\n\n\n\n//here we r doing it right after the register in registerModal\n//REGISTER USER\nexport const register = ({ name, email, password }) => dispatch => {\n\n    \n    //headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n\n//REQUEST BODY\n//turns javascript object to json\nconst body = JSON.stringify({ name, email, password });\n \naxios.post('/api/users', body, config)\n.then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data                     //we want to send the payload to the reducer along with data and the token\n}))\n\n.catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));         //returnErrors just returns an object like this with the type but it takes the couple of parameters like msg,status, and a possible id\n    dispatch({\n        type: REGISTER_FAIL\n    });\n});\n\n}\n\n\n\n\n\n\n\n//SETUP config/headers and token\n\nexport const tokenConfig = getState => {\n        //GET TOKEN FROM THE localStorage\n        const token = getState().auth.token;\n\n    \n    \n        //headers\n        const config = {\n                headers: {\n                    \"Content-type\": \"application/json\"\n            }\n\n        }   \n\n        //if token, add to headers\n        if (token) {\n            config.headers['x-auth-token'] = token;\n        }\n        return config;\n    }"]},"metadata":{},"sourceType":"module"}