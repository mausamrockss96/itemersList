{"ast":null,"code":"var _jsxFileName = \"/home/mausam/travnode/client/src/components/ShoppingList.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'; // import { v4 as uuidv4 } from 'uuid';\n// uuidv4();\n\nimport { connect } from 'react-redux'; //allows us to basically to get state from redux into react into a react component\n\nimport { getItems, deleteItem } from '../actions/itemActions'; //when we call getitems it will send the action.type or it will dispatch to the reducer and then returns the state to the component\n\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDeleteClick = id => {\n      this.props.deleteItem(id);\n    };\n  }\n\n  // state = {\n  //     items: [\n  //         { id: uuidv4(), name:\"egg\" },\n  //         { id: uuidv4(), name:\"milk\" },\n  //         { id: uuidv4(), name:\"meat\" },\n  //         { id: uuidv4(), name:\"proteins\" }\n  //     ]\n  // }\n  //now we r gonna call this getitems from the component using reducers so removing the states from the components coz we want it to come from our redux reducer our item reducer\n  //when you want to make API request or calling an action we do it\n  //before we used to access(this).state from the component but we r now using state from our reducer from our store\n  componentDidMount() {\n    this.props.getItems();\n  }\n\n  render() {\n    // const { items } = this.state\n    //state from reducer component react and mapping the state to props\n    //item represents the whole state but items represents only to an array\n    const {\n      items\n    } = this.props.item;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransitionGroup, {\n      className: \"shopping-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, items.map(({\n      id,\n      name\n    }) => /*#__PURE__*/React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ListGroupItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"remove-btn\",\n      color: \"primary\",\n      size: \"sm\" // onClick={() => {\n      //     this.setState(state => ({\n      //         items: state.items.filter(item => item.id !== id)\n      //     }));\n      // }} \n      //when we click the delete button its going to call on delete click its gonna pass the ID in which comes in right above the delete function\n      //and then we r gonna call the action delete item pass in the ID which is this here in the itemaction.js and then from there its going to get\n      //sent to the reducer along with the payload and then in the reducer we r going to do the same thing we did before with the filter except we r\n      //using action.payload which should include the ID so , and hence in this way we can delete the item by using ID\n      ,\n      onClick: this.onDeleteClick.bind(this, id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, \"\\xD7\"), name))))));\n  }\n\n} //when you bring an action from redux to react its going to be stored as prop\n\n\nShoppingList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  item: PropTypes.object.isRequired //it respresents our state which is going to be object\n\n}; //when i say it represents our state it is a prop but we r mapping it from the state so we r mapping those the redux state to a component property\n\nconst mapStateToProps = state => ({\n  item: state.item\n}); //mapStateToProps allows us to take our items state in this case this is our state and \n//we want to basically turn this or map this into a component property so that we can \n//use it in the shopping lists so we want to use it as this.props.items\n\n\nexport default connect(mapStateToProps, {\n  getItems,\n  deleteItem\n})(ShoppingList);","map":{"version":3,"sources":["/home/mausam/travnode/client/src/components/ShoppingList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","connect","getItems","deleteItem","PropTypes","ShoppingList","onDeleteClick","id","props","componentDidMount","render","items","item","map","name","bind","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAQA,KAAR,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,aAA/B,EAA8CC,MAA9C,QAA4D,YAA5D;AACA,SAAQC,aAAR,EAAuBC,eAAvB,QAA8C,wBAA9C,C,CACA;AACA;;AAEA,SAASC,OAAT,QAAwB,aAAxB,C,CAA0C;;AAC1C,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,wBAArC,C,CAAiE;;AACjE,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,YAAN,SAA2BX,SAA3B,CACA;AAAA;AAAA;;AAAA,SAyBAY,aAzBA,GAyBgBC,EAAE,IAAI;AAClB,WAAKC,KAAL,CAAWL,UAAX,CAAsBI,EAAtB;AACH,KA3BD;AAAA;;AACI;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEJ;AACA;AACA;AACAE,EAAAA,iBAAiB,GACjB;AACI,SAAKD,KAAL,CAAWN,QAAX;AACH;;AAqBGQ,EAAAA,MAAM,GACN;AACI;AACA;AACE;AAEF,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKH,KAAL,CAAWI,IAA7B;AACA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAmBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,eAAD;AAAiB,MAAA,SAAS,EAAC,eAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,KAAK,CAACE,GAAN,CAAU,CAAC;AAAEN,MAAAA,EAAF;AAAMO,MAAAA;AAAN,KAAD,kBACP,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAIP,EAAtB;AAA0B,MAAA,OAAO,EAAE,GAAnC;AAAwC,MAAA,UAAU,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AACA,MAAA,SAAS,EAAC,YADV;AAEA,MAAA,KAAK,EAAC,SAFN;AAGA,MAAA,IAAI,EAAC,IAHL,CAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAbA;AAcA,MAAA,OAAO,EAAI,KAAKD,aAAL,CAAmBS,IAAnB,CAAwB,IAAxB,EAA8BR,EAA9B,CAdX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAmBMO,IAnBN,CADJ,CADH,CADL,CADJ,CAnBJ,CADJ;AAqDH;;AAlGL,C,CAsGA;;;AACAT,YAAY,CAACW,SAAb,GAAyB;AACrBd,EAAAA,QAAQ,EAAEE,SAAS,CAACa,IAAV,CAAeC,UADJ;AAErBN,EAAAA,IAAI,EAAER,SAAS,CAACe,MAAV,CAAiBD,UAFF,CAEiB;;AAFjB,CAAzB,C,CAKA;;AACA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAChCT,EAAAA,IAAI,EAAES,KAAK,CAACT;AADoB,CAAZ,CAAxB,C,CAKA;AACA;AACA;;;AACA,eAAeX,OAAO,CAACmB,eAAD,EAAiB;AAAElB,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAjB,CAAP,CAAkDE,YAAlD,CAAf","sourcesContent":["import  React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport {CSSTransition, TransitionGroup } from 'react-transition-group';\n// import { v4 as uuidv4 } from 'uuid';\n// uuidv4();\n\nimport { connect } from 'react-redux';    //allows us to basically to get state from redux into react into a react component\nimport { getItems, deleteItem } from '../actions/itemActions';   //when we call getitems it will send the action.type or it will dispatch to the reducer and then returns the state to the component\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component\n{\n    // state = {\n    //     items: [\n    //         { id: uuidv4(), name:\"egg\" },\n    //         { id: uuidv4(), name:\"milk\" },\n    //         { id: uuidv4(), name:\"meat\" },\n    //         { id: uuidv4(), name:\"proteins\" }\n            \n    //     ]\n    // }\n\n//now we r gonna call this getitems from the component using reducers so removing the states from the components coz we want it to come from our redux reducer our item reducer\n//when you want to make API request or calling an action we do it\n//before we used to access(this).state from the component but we r now using state from our reducer from our store\ncomponentDidMount()\n{\n    this.props.getItems();\n}\n\n\n\n\n\n\n\nonDeleteClick = id => {\n    this.props.deleteItem(id);\n};\n\n\n\n\n\n\n\n\n\n\n    render()\n    {\n        // const { items } = this.state\n        //state from reducer component react and mapping the state to props\n          //item represents the whole state but items represents only to an array\n\n        const { items } = this.props.item           \n        return(\n            <Container>\n                {/* <Button\n                color=\"dark\"\n                style={{ marginBottom: \"2rem\" }}\n                onClick={ () => {\n                    const name = prompt('Enter the Item');\n                    if(name)\n                    {\n                        this.setState(state => ({\n                            items: [...state.items, {id: uuidv4(), name}]\n                        }));\n                    }\n                } }\n                \n                >\n                    Add Item\n\n                </Button> */}\n\n                <ListGroup>\n                    <TransitionGroup className=\"shopping-list\">\n                        {items.map(({ id, name}) => (\n                            <CSSTransition key = {id} timeout={500} classNames=\"fade\">\n                                <ListGroupItem>\n                                    <Button\n                                    className=\"remove-btn\"\n                                    color=\"primary\"\n                                    size=\"sm\"\n                                    // onClick={() => {\n                                    //     this.setState(state => ({\n                                    //         items: state.items.filter(item => item.id !== id)\n                                    //     }));\n                                    // }} \n\n                                    //when we click the delete button its going to call on delete click its gonna pass the ID in which comes in right above the delete function\n                                    //and then we r gonna call the action delete item pass in the ID which is this here in the itemaction.js and then from there its going to get\n                                    //sent to the reducer along with the payload and then in the reducer we r going to do the same thing we did before with the filter except we r\n                                    //using action.payload which should include the ID so , and hence in this way we can delete the item by using ID\n                                    onClick = {this.onDeleteClick.bind(this, id)}     \n                                    >\n                                        &times;\n                                    </Button>\n                                    { name }\n                                </ListGroupItem>\n\n                            </CSSTransition>\n                        ) )}\n                    </TransitionGroup>\n                </ListGroup>\n            </Container>\n\n        )\n    }\n}\n\n\n//when you bring an action from redux to react its going to be stored as prop\nShoppingList.propTypes = {\n    getItems: PropTypes.func.isRequired,\n    item: PropTypes.object.isRequired     //it respresents our state which is going to be object\n}\n\n//when i say it represents our state it is a prop but we r mapping it from the state so we r mapping those the redux state to a component property\nconst mapStateToProps = (state) => ({\n    item: state.item\n});\n\n\n//mapStateToProps allows us to take our items state in this case this is our state and \n//we want to basically turn this or map this into a component property so that we can \n//use it in the shopping lists so we want to use it as this.props.items\nexport default connect(mapStateToProps,{ getItems, deleteItem })(ShoppingList);"]},"metadata":{},"sourceType":"module"}