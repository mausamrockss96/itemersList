{"ast":null,"code":"var _jsxFileName = \"/home/mausam/travnode/client/src/components/auth/RegisterModal.js\";\n//atlast importing this file on appNavbar.js to display there\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      //clear Errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault(); //from register\n\n      const {\n        name,\n        email,\n        password\n      } = this.state; //create user object\n\n      const newUser = {\n        name,\n        email,\n        password\n      }; //attempt to register\n\n      this.props.register(newUser);\n    };\n  }\n\n  //to show the msg notification of error REGISTER_FAIL\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props; //below we mapped the error in stateToProps\n\n    if (error !== prevProps.error) {\n      //check for the register error and this is where the id comes in\n      if (error.id === 'REGISTER_FAIL') {\n        this.setState({\n          msg: error.msg.msg //in redux there r two messages,if this msg has something in it we want to output alert, so putting alert above\n\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } //to make sure the modal is open,to make sure that the value of modal above be true from false\n    //if authenticated, close the modal\n    //so once i hit the register submit button, it should hit the endpoint, should get added to the mongodb, \n    // and should get our token back, it should put in the state and we should basically be logged in because its gonna load the user and its gonna find the token\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle(); //which will close the modal\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, \"Register\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, this.state.msg, \" \") : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 25\n      }\n    }, \" Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      email: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 25\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: \"2rem\"\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 25\n      }\n    }, \"Register\"))))));\n  }\n\n} //As far as the state that we want to bring in, we want to bring in the value of isAuthenticated, because once we register we want to close it if we r authenticated\n//another we want to add is errorState so that we can output the error message \n//and this auth and error , i am getting from reducer/index.js which will give us access to all the stuff within the state of the error and the auth reducer\n\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  // i am not going to do require because it can be null\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/home/mausam/travnode/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","RegisterModal","state","modal","name","email","password","msg","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["//atlast importing this file on appNavbar.js to display there\n\n\nimport React,{ Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\n\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component\n{\n    state = {\n        modal: false,\n        name: '',\n        email: '',\n        password: '',\n        msg: null\n    }\n\n\nstatic propTypes = { \n    isAuthenticated: PropTypes.bool,         // i am not going to do require because it can be null\n    error: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n}\n\n\n\n\n\n\n\n//to show the msg notification of error REGISTER_FAIL\ncomponentDidUpdate(prevProps)\n{\n    const { error, isAuthenticated } = this.props;                                          //below we mapped the error in stateToProps\n    if (error !== prevProps.error)\n    {\n        //check for the register error and this is where the id comes in\n        if(error.id === 'REGISTER_FAIL')\n        {\n            this.setState({\n                msg: error.msg.msg              //in redux there r two messages,if this msg has something in it we want to output alert, so putting alert above\n                \n            });\n            \n        }\n        else\n         {\n            this.setState({ \n                msg: null\n            });\n        }\n    }\n\n    //to make sure the modal is open,to make sure that the value of modal above be true from false\n    //if authenticated, close the modal\n    //so once i hit the register submit button, it should hit the endpoint, should get added to the mongodb, \n    // and should get our token back, it should put in the state and we should basically be logged in because its gonna load the user and its gonna find the token\n    if (this.state.modal)\n    {\n        if (isAuthenticated)\n        {\n            this.toggle();            //which will close the modal\n        }\n    }\n\n\n}\n \n   \ntoggle = () => {\n    \n    \n    //clear Errors\n    this.props.clearErrors();\n\n\n\n    this.setState({\n           modal: !this.state.modal\n       });\n};\n\nonChange = (e) => {\n    this.setState({\n        [e.target.name]: e.target.value\n    });\n}\n\n\n\nonSubmit = e => {\n    e.preventDefault();\n\n    //from register\n    const { name, email, password } = this.state;\n\n    //create user object\n    const newUser = {\n        name,\n        email,\n        password\n    };\n\n    //attempt to register\n    this.props.register(newUser);\n\n\n}\n\n\n\n\nrender()\n{\n    return(\n        <div>\n\n            {/* <Button\n                color= \"dark\"\n                style ={{ marginBottom: '8rem' }}\n                onClick = { this.toggle }\n\n            \n            >Add Item\n            </Button> */}\n\n            <NavLink onClick={this.toggle} href=\"#\">\n                Register\n            </NavLink>\n\n            <Modal\n            isOpen = {this.state.modal}\n            toggle={this.toggle}\n            \n            >\n            <ModalHeader toggle={this.toggle}>Register</ModalHeader>\n\n            <ModalBody>\n\n                { this.state.msg ? (\n                    <Alert color='success'>{this.state.msg} </Alert>\n                ) : null }\n   \n                <Form onSubmit = {this.onSubmit}>\n                    <FormGroup>\n                        <Label for=\"name\"> Name</Label>\n                        <Input\n                        type = \"text\"\n                        name = \"name\"\n                        id=\"name\"\n                        placeholder = \"Name\"\n                        className = \"mb-3\"\n                        onChange={this.onChange}\n                        >\n                        </Input>\n\n                        \n                        \n                        \n                        <Label for=\"email\">Email</Label>\n                        <Input\n                        type = \"email\"\n                        email = \"email\"\n                        id=\"email\"\n                        placeholder = \"Email\"\n                        className = \"mb-3\"\n                        onChange={this.onChange}\n                        >\n                        </Input>\n\n\n\n                        <Label for=\"password\">Password</Label>\n                        <Input\n                        type = \"password\"\n                        name = \"password\"\n                        id=\"password\"\n                        placeholder = \"Password\"\n                        className = \"mb-3\"\n                        onChange={this.onChange}\n                        >\n                        </Input>\n\n                        <Button color=\"dark\" style = {{marginTop:\"2rem\"}} block>\n                            Register\n\n                        </Button>\n                    </FormGroup>\n\n                </Form>\n            </ModalBody>\n            </Modal>\n\n        </div>\n    )\n}\n}\n\n\n//As far as the state that we want to bring in, we want to bring in the value of isAuthenticated, because once we register we want to close it if we r authenticated\n//another we want to add is errorState so that we can output the error message \n//and this auth and error , i am getting from reducer/index.js which will give us access to all the stuff within the state of the error and the auth reducer\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n});\n\n\nexport default connect(mapStateToProps, { register,clearErrors })(RegisterModal);\n"]},"metadata":{},"sourceType":"module"}