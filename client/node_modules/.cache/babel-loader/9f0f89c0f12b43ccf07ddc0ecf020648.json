{"ast":null,"code":"import _toConsumableArray from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/mausam/travnode/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";//Reducer is where our actual state is gonna go and thjis is where we check our actions like get,add action item\n// import { v4 as uuidv4 } from 'uuid';     no need after mongo connected\nimport{GET_ITEMS,DELETE_ITEM,ADD_ITEM,ITEMS_LOADING}from'../actions/types';// uuidv4();\n//commented for connection with backend\n// const initialState = {\n//     items: [\n//         { id: uuidv4(), name:\"egg\" },\n//         { id: uuidv4(), name:\"milk\" },\n//         { id: uuidv4(), name:\"meat\" },\n//         { id: uuidv4(), name:\"milkshake\" }\n//     ]\n// };\nvar initialState={items:[],loading:false};//we r using the spread operator like this because we cannot actually mutate the state and we cant directly change it and hence we have to make a copy of this\nexport default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_ITEMS:return _objectSpread(_objectSpread({},state),{},{items:action.payload,loading:false});//before we made the request we called setItemsLoading which makes a request to the reducer with items loading\n//as the type which sets loading to true so it sets to tue where we make the request, after we make the request and we get the items back\n//and we get that payload we also want to set back to false\ncase ADD_ITEM:return _objectSpread(_objectSpread({},state),{},{items:[action.payload].concat(_toConsumableArray(state.items))});case DELETE_ITEM:return _objectSpread(_objectSpread({},state),{},{items:state.items.filter(function(item){return item._id!==action.payload;})});case ITEMS_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:true});default:return state;}}","map":{"version":3,"sources":["/home/mausam/travnode/client/src/reducers/itemReducer.js"],"names":["GET_ITEMS","DELETE_ITEM","ADD_ITEM","ITEMS_LOADING","initialState","items","loading","state","action","type","payload","filter","item","_id"],"mappings":"6SAAA;AAGA;AACA,OAASA,SAAT,CAAoBC,WAApB,CAAiCC,QAAjC,CAA2CC,aAA3C,KAAgE,kBAAhE,CACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,OAAO,CAAE,KAFQ,CAArB,CAOA;AACA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CACnD,OAAQA,MAAM,CAACC,IAAf,EAEI,IAAKT,CAAAA,SAAL,CACI,sCACOO,KADP,MAEIF,KAAK,CAAEG,MAAM,CAACE,OAFlB,CAGIJ,OAAO,CAAE,KAHb,GAMA;AACA;AACA;AACA,IAAKJ,CAAAA,QAAL,CACI,sCACOK,KADP,MAEIF,KAAK,EAAGG,MAAM,CAACE,OAAV,4BAAsBH,KAAK,CAACF,KAA5B,EAFT,GAKJ,IAAKJ,CAAAA,WAAL,CACI,sCACOM,KADP,MAEIF,KAAK,CAAEE,KAAK,CAACF,KAAN,CAAYM,MAAZ,CAAmB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACE,OAAxB,EAAvB,CAFX,GAMA,IAAKP,CAAAA,aAAL,CACI,sCACOI,KADP,MAEID,OAAO,CAAE,IAFb,GAIA,QACI,MAAOC,CAAAA,KAAP,CA/BpB,CAiCH","sourcesContent":["//Reducer is where our actual state is gonna go and thjis is where we check our actions like get,add action item\n\n\n// import { v4 as uuidv4 } from 'uuid';     no need after mongo connected\nimport { GET_ITEMS, DELETE_ITEM, ADD_ITEM, ITEMS_LOADING } from '../actions/types';\n// uuidv4();\n\n\n//commented for connection with backend\n// const initialState = {\n//     items: [\n//         { id: uuidv4(), name:\"egg\" },\n//         { id: uuidv4(), name:\"milk\" },\n//         { id: uuidv4(), name:\"meat\" },\n//         { id: uuidv4(), name:\"milkshake\" }\n\n//     ]\n// };\n\n\n\n\n\nconst initialState = {\n    items: [],\n    loading: false\n};\n\n\n\n//we r using the spread operator like this because we cannot actually mutate the state and we cant directly change it and hence we have to make a copy of this\nexport default function (state = initialState, action) {\n    switch (action.type) \n    {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n\n            //before we made the request we called setItemsLoading which makes a request to the reducer with items loading\n            //as the type which sets loading to true so it sets to tue where we make the request, after we make the request and we get the items back\n            //and we get that payload we also want to set back to false\n            case ADD_ITEM:\n                return {\n                    ...state,\n                    items: [action.payload, ...state.items]\n                  };\n            \n            case DELETE_ITEM:   \n                return {\n                    ...state,\n                    items: state.items.filter(item => item._id !== action.payload)\n                };\n\n\n                case ITEMS_LOADING:\n                    return {\n                        ...state,\n                        loading: true\n                    }\n                    default:\n                        return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}