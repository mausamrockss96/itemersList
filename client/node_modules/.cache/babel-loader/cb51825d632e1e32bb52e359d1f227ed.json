{"ast":null,"code":"//Reducer is where our actual state is gonna go and thjis is where we check our actions like get,add action item\nimport { v4 as uuidv4 } from 'uuid';\nimport { GET_ITEMS, DELETE_ITEM, ADD_ITEM, ITEMS_LOADING } from '../actions/types';\nuuidv4(); //commented for connection with backend\n\nconst initialState = {\n  items: [{\n    id: uuidv4(),\n    name: \"egg\"\n  }, {\n    id: uuidv4(),\n    name: \"milk\"\n  }, {\n    id: uuidv4(),\n    name: \"meat\"\n  }, {\n    id: uuidv4(),\n    name: \"milkshake\"\n  }]\n}; // const initialState = {\n//     items: [],\n//     loading: false\n// };\n//we r using the spread operator like this because we cannot actually mutate the state and we cant directly change it and hence we have to make a copy of this\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_ITEMS:\n      return { ...state,\n        items: action.payload,\n        loading: false\n      };\n    //before we made the request we called setItemsLoading which makes a request to the reducer with items loading\n    //as the type which sets loading to true so it sets to tue where we make the request, after we make the request and we get the items back\n    //and we get that payload we also want to set back to false\n\n    case ADD_ITEM:\n      return { ...state,\n        items: [action.payload, ...state.items]\n      };\n\n    case DELETE_ITEM:\n      return { ...state,\n        items: state.items.filter(item => item.id !== action.payload)\n      };\n\n    case ITEMS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/mausam/travnode/client/src/reducers/itemReducer.js"],"names":["v4","uuidv4","GET_ITEMS","DELETE_ITEM","ADD_ITEM","ITEMS_LOADING","initialState","items","id","name","state","action","type","payload","loading","filter","item"],"mappings":"AAAA;AAGA,SACIA,EAAE,IAAIC,MADV,QAEO,MAFP;AAGA,SACIC,SADJ,EAEIC,WAFJ,EAGIC,QAHJ,EAIIC,aAJJ,QAKO,kBALP;AAMAJ,MAAM,G,CAGN;;AACA,MAAMK,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAEP,MAAM,EAAZ;AAAgBQ,IAAAA,IAAI,EAAC;AAArB,GADG,EAEH;AAAED,IAAAA,EAAE,EAAEP,MAAM,EAAZ;AAAgBQ,IAAAA,IAAI,EAAC;AAArB,GAFG,EAGH;AAAED,IAAAA,EAAE,EAAEP,MAAM,EAAZ;AAAgBQ,IAAAA,IAAI,EAAC;AAArB,GAHG,EAIH;AAAED,IAAAA,EAAE,EAAEP,MAAM,EAAZ;AAAgBQ,IAAAA,IAAI,EAAC;AAArB,GAJG;AADU,CAArB,C,CAcA;AACA;AACA;AACA;AAIA;;AACA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,SAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHH,QAAAA,KAAK,EAAEI,MAAM,CAACE,OAFX;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;AAMA;AACA;AACA;;AACA,SAAKV,QAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHH,QAAAA,KAAK,EAAE,CAACI,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACH,KAA1B;AAFJ,OAAP;;AAKJ,SAAKJ,WAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYQ,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACR,EAAL,KAAYG,MAAM,CAACE,OAA9C;AAFJ,OAAP;;AAMA,SAAKR,aAAL;AACI,aAAO,EACH,GAAGK,KADA;AAEHI,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIA;AACI,aAAOJ,KAAP;AA9BpB;AAgCH","sourcesContent":["//Reducer is where our actual state is gonna go and thjis is where we check our actions like get,add action item\n\n\nimport {\n    v4 as uuidv4\n} from 'uuid';\nimport {\n    GET_ITEMS,\n    DELETE_ITEM,\n    ADD_ITEM,\n    ITEMS_LOADING\n} from '../actions/types';\nuuidv4();\n\n\n//commented for connection with backend\nconst initialState = {\n    items: [\n        { id: uuidv4(), name:\"egg\" },\n        { id: uuidv4(), name:\"milk\" },\n        { id: uuidv4(), name:\"meat\" },\n        { id: uuidv4(), name:\"milkshake\" }\n\n    ]\n};\n\n\n\n\n\n// const initialState = {\n//     items: [],\n//     loading: false\n// };\n\n\n\n//we r using the spread operator like this because we cannot actually mutate the state and we cant directly change it and hence we have to make a copy of this\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_ITEMS:\n            return {\n                ...state,\n                items: action.payload,\n                loading: false\n            };\n\n            //before we made the request we called setItemsLoading which makes a request to the reducer with items loading\n            //as the type which sets loading to true so it sets to tue where we make the request, after we make the request and we get the items back\n            //and we get that payload we also want to set back to false\n            case ADD_ITEM:\n                return {\n                    ...state,\n                    items: [action.payload, ...state.items]\n                  }\n            \n            case DELETE_ITEM:\n                return {\n                    ...state,\n                    items: state.items.filter(item => item.id !== action.payload)\n                };\n\n\n                case ITEMS_LOADING:\n                    return {\n                        ...state,\n                        loading: true\n                    }\n                    default:\n                        return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}